// Code generated by MockGen. DO NOT EDIT.
// Source: image_analysis_service.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockImageAnalysisServicer is a mock of ImageAnalysisServicer interface.
type MockImageAnalysisServicer struct {
	ctrl     *gomock.Controller
	recorder *MockImageAnalysisServicerMockRecorder
}

// MockImageAnalysisServicerMockRecorder is the mock recorder for MockImageAnalysisServicer.
type MockImageAnalysisServicerMockRecorder struct {
	mock *MockImageAnalysisServicer
}

// NewMockImageAnalysisServicer creates a new mock instance.
func NewMockImageAnalysisServicer(ctrl *gomock.Controller) *MockImageAnalysisServicer {
	mock := &MockImageAnalysisServicer{ctrl: ctrl}
	mock.recorder = &MockImageAnalysisServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageAnalysisServicer) EXPECT() *MockImageAnalysisServicerMockRecorder {
	return m.recorder
}

// ProcessImageAndPrompt mocks base method.
func (m *MockImageAnalysisServicer) ProcessImageAndPrompt(ctx context.Context, firebaseToken string, imageData []byte, prompt string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessImageAndPrompt", ctx, firebaseToken, imageData, prompt)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessImageAndPrompt indicates an expected call of ProcessImageAndPrompt.
func (mr *MockImageAnalysisServicerMockRecorder) ProcessImageAndPrompt(ctx, firebaseToken, imageData, prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessImageAndPrompt", reflect.TypeOf((*MockImageAnalysisServicer)(nil).ProcessImageAndPrompt), ctx, firebaseToken, imageData, prompt)
}
